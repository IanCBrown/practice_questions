import sys

# get input 
for i in sys.stdin:
	ab = i.split()
	a = int(ab[0])
	b = int(ab[1])

# Reverses strings, arrays, tuples, etc
a = str(a)[::-1]
b = str(b)[::-1] 


pipe input to file
$ echo -e "first line\nsecond line" | python python_iterate_stdin.py

function ord() would get the int value of the char. And in case you want to convert back after playing with the number, function chr() does the trick. 

strip newline characters 
i = i.strip("\n")

# iterate backwards
range(10, 0, -1)

# append string for output
return "".join(string)

# list comprehension for converting types
numbers = [ int(x) for x in numbers ]


int i = (int) sizeof(input) / sizeof(input[0]) 


import random
for x in range(10):
  print random.randint(1,101)


# reverse 
>>> a = ["foo", "bar", "baz"]
>>> for i in reversed(a):
...     print i
... 
baz
bar
foo

# nested list comprehensions 
list_of_pairs = [[int(i) for i in pair] for pair in list_of_pairs]


# mean of list 
sum(l)/len(l) 


# decimal places
print("{0:.2f}".format(a))
print("%.2f" % a)

# sort descending order 
price_list.sort(reverse=True)

# split list into evenly sized chunks 
def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

# fast way to print list 
print(*myList, sep='\n')


# CONVEX POLYGONS 
https://www.geeksforgeeks.org/area-of-a-polygon-with-given-n-ordered-vertices/